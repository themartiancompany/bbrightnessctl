#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
        "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_share="$( \
  realpath \
    "${_bin}/../share")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

_root_requirements() {
  _check_cmd \
    "su"
}

_termux_requirements() {
  _check_cmd \
    "termux-brightness"
}

# shellcheck disable=SC2034
_global_variables() {
  brightness_value=""
  input_command=""
  setting_method=""
  color=""
  quiet=""
}

_root_brightness_set() {
  local \
    _value="${1}" \
    _cmd=() \
    _lcd \
    _brightness \
    _brightnessctl \
    _os
  _os="$( \
    uname \
      -o)"
  _brightnessctl="$( \
    command \
      -v \
      "brightnessctl")"
  if [[ "${_os}" == "Android" ]]; then
    _lcd="/sys/class/leds/lcd-backlight"
    _brightness="${_lcd}/brightness"
    _cmd=(
      "echo"
        "${_value}" '>'
        "${_brightness}"
    )
    su \
      -c \
      "${_cmd[*]}"
  elif [[ "${_os}" == "GNU/Linux" && \
          "${_brightnessctl}" != "" ]]; then
    _mount_opts="remount,rw"
    _cmd=(
      mount
        -o
          "${_mount_opts}"
        "/sys"
    )
    su \
      -c \
        "${_cmd[*]}"
    _cmd=(
      brightnessctl
        set
          "${_value}"
    )
    su \
      -c \
        "${_cmd[*]}"
    _mount_opts="remount,ro"
    _cmd=(
      mount
        -o
          "${_mount_opts}"
        "/sys"
    )
    su \
      -c \
        "${_cmd[*]}"
  fi
}

_root_brightness_get() {
  local \
    _cmd=() \
    _lcd \
    _brightness
  _lcd="/sys/class/leds/lcd-backlight"
  _brightness="${_lcd}/brightness"
  _cmd=(
    "cat"
      "${_brightness}"
  )
  su \
    -c \
    "${_cmd[*]}"
}

_termux_brightness_set() {
  local \
    _value="${1}" \
    _cmd=()
  _cmd=(
    "termux-brightness"
      "${_value}"
  )
  "${_cmd[@]}"
}

_termux_brightness_get() {
  _root_brightness_get
}

_brightnessctl_brightness_set() {
  local \
    _cmd=() \
    _opts=()
  _opts+=(
    "$@"
  )
  _cmd=(
    "brightnessctl"
      "set"
      "${_opts[@]}"
  )
  "${_cmd[@]}" || \
  _root_brightness_set \
    "${_opts[@]}"
}

_brightnessctl_brightness_get() {
  local \
    _cmd=() \
    _opts=()
  _opts=(
    "$@"
  )
  _cmd=(
    "brightnessctl"
      "get"
      "${_opts[@]}"
  )
  "${_cmd[@]}"
}

_auto_detect_method() {
  local \
    _os \
    _method
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    _method="termux"
    if [[ "$(command \
               -v \
               "su")" ]]; then
      _method="root"
    fi
  fi
  echo \
    "${_method}"
}

_bbrightnessctl() {
  local \
    _cmd="${1}" \
    _value="${2}" \
    _method="${3}"
    _opts=()
  shift \
    3
  _opts=(
    "$@"
  )
  if [[ "${_method}" == "auto" ]]; then 
    _method="$( \
      _auto_detect_method)"
  fi
  "_${_method}_brightness_${_cmd}" \
    "${_value}" \
    "${_opts[*]}"
}

_set_overrides() {
  _set_override \
    "setting" \
    "method" \
    "brightnessctl"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit_code="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Cross-platform brightnessctl utility.

Usage:
  ${app_name}
    [options]
    <input_command>
    <brightness_value>

  options:
     -m                   Setting method (brightnessctl,
                          root, termux)
			  Default: ${setting_method}

     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit_code}"
}

_globals
_global_variables
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'm:cvh?' \
    arg; do
  case \
    "${arg}" in
    m) \
      override_setting_method="${OPTARG}" ;;
    c) \
      override_color="y" ;;
    e) \
      override_video_encode="y" ;;
    v) \
      override_quiet="n" ;;
    h|?) \
      _set_overrides && \
      _usage \
        0 ;;
    *) \
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _usage \
    1
fi
input_command="${1}"
if [[ "${input_command}" == "set" ]]; then
  if (( $# < 2 )); then
    _usage \
      1
  fi
  brightness_value="${2}"
fi
_set_overrides
_config_user_init \
  "${app_name}"
app_opts=(
  "${input_command}"
  "${brightness_value}"
  "${setting_method}"
)
_bbrightnessctl \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
